import pandas as pd
import numpy as np

# Load the dataset into a DataFrame
df = pd.read_csv(r"C:\Users\fidaw\Downloads\ipl_2022_dataset.csv")


# Understand the shape of the data (rows, columns)
print("Shape of dataset:", df.shape)

# Get concise summary of the DataFrame, including data types and non-null counts
print("Info about dataset:")
print(df.info())

# View the first 5 rows of the dataset to get a sample and look for missing values
print("First 5 rows of dataset:")
print(df.head())

print("\n--- Handling Missing Values ---")
# Check for missing values in each column.
print("Missing values per column:")
print(df.isnull().sum())
# For '2021 Squad', a null value means the player wasn't in a squad in 2021.

df['2021 Squad'].fillna('Not Applicable', inplace=True)
print("\nMissing values handled for '2021 Squad'.")


print("\n--- Correcting Data Types ---")
# The 'COST IN ₹ (CR.)' and 'Cost IN $ (000)' columns seem to be objects (strings) if they contain non-numeric values.
# Let's inspect them and convert to numeric types if necessary.
df['COST IN ₹ (CR.)'] = pd.to_numeric(df['COST IN ₹ (CR.)'], errors='coerce').fillna(0)
df['Cost IN $ (000)'] = pd.to_numeric(df['Cost IN $ (000)'], errors='coerce').fillna(0)
print("Data types for cost columns verified and corrected.")


print("\n--- Feature Engineering ---")
#Create a 'Status' column (Sold/Unsold)
# If the cost is greater than 0, the player was sold.
df['Status'] = np.where(df['COST IN ₹ (CR.)'] > 0, 'Sold', 'Unsold')
print("Created 'Status' column.")

print("\n--- Final Cleaned DataFrame ---")
print(df.head())

print("\n--- Value Counts for New Columns ---")
print("\nStatus of players:")
print(df['Status'].value_counts())

print("\n--- Value Counts for New Columns ---")
print("\nStatus of players:")
print(df['Status'].value_counts())


# Descriptive Statistics

print("\n--- Numerical Data Summary ---")
# Use .describe() for a quick statistical summary of numerical columns.
# We'll focus on the cost in crores for this analysis.
print("Statistical summary for 'COST IN ₹ (CR.)':")
print(df['COST IN ₹ (CR.)'].describe())


print("\n--- Categorical Data Summary ---")
# Count unique values for important categorical columns.

print("\nNumber of players by their 'TYPE' (Role):")
print(df['TYPE'].value_counts())

print("\nNumber of players by their auction 'Status':")
print(df['Status'].value_counts())

# We can also check the number of unique teams players were sold to.
# This will include a count for 'Unsold' players if we don't filter.
# Let's look at the teams that bought players.
sold_players_df = df[df['Status'] == 'Sold']
print("\nNumber of players bought by each 'Team':")
print(sold_players_df['Team'].value_counts())

def convert_base_price(price):
    if isinstance(price, str):
        price = price.lower()
        if 'cr' in price:
            return float(price.replace('cr', '').strip())
        if 'lakh' in price:
            return float(price.replace('lakh', '').strip()) / 100
    return 0 # For 'Draft Pick' or other non-numeric values

df['Base_Price_CR'] = df['Base Price'].apply(convert_base_price)
print("Created numerical 'Base_Price_CR' column.")

import matplotlib.pyplot as plt
import seaborn as sns

#Histogram for Sold Price
plt.figure(figsize=(10, 6))
sns.histplot(sold_players_df['COST IN ₹ (CR.)'], bins=20, kde=True)
plt.title('Distribution of Sold Prices (in Crores)')
plt.xlabel('Cost in ₹ (CR.)')
plt.ylabel('Number of Players')
plt.show()

#Bar Chart for Player Status (Sold vs. Unsold)
plt.figure(figsize=(8, 5))
sns.countplot(x='Status', data=df)
plt.title('Count of Sold vs. Unsold Players')
plt.xlabel('Status')
plt.ylabel('Count')
plt.show()

#Bar Chart for Player Roles (TYPE)
plt.figure(figsize=(10, 6))
sns.countplot(x='TYPE', data=df)
plt.title('Count of Players by Role')
plt.xlabel('Player Role')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

#total amount spent by each team
team_spending = sold_players_df.groupby('Team')['COST IN ₹ (CR.)'].sum().sort_values(ascending=False)

# bar chart
plt.figure(figsize=(15, 8))
sns.barplot(x=team_spending.index, y=team_spending.values, palette='viridis')
plt.title('Total Money Spent by Each Team', fontsize=16, fontweight='bold')
plt.xlabel('Team', fontsize=12)
plt.ylabel('Total Cost (in ₹ Crores)', fontsize=12)
plt.xticks(rotation=45, ha='right')
plt.tight_layout() # Adjusts plot to prevent labels from overlapping
plt.show()
print("Finding: This visual clearly highlights which teams invested the most money in the auction. You can quickly identify the top-spending and most frugal teams.")

# number of players for each role
player_roles = df['TYPE'].value_counts()

# pie chart
plt.figure(figsize=(10, 10))
plt.pie(player_roles, labels=player_roles.index, autopct='%1.1f%%', startangle=140,
        wedgeprops={'edgecolor': 'black'}, textprops={'fontsize': 12})
plt.title('Percentage of Players by Role', fontsize=16, fontweight='bold')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()
print("Finding: This chart provides an immediate understanding of the composition of the auction list. It's clear that All-Rounders and Bowlers were the most numerous categories.")

# histogram for final sold prices
plt.figure(figsize=(12, 7))
sns.histplot(sold_players_df['COST IN ₹ (CR.)'], bins=15, kde=True, color='dodgerblue')
plt.title('Distribution of Final Player Prices', fontsize=16, fontweight='bold')
plt.xlabel('Cost (in ₹ Crores)', fontsize=12)
plt.ylabel('Number of Players', fontsize=12)
plt.show()
print("Finding: This visualization reveals that a vast majority of players were sold for prices under 5 Crores. The long tail to the right shows that very few players commanded exceptionally high prices, making them rare and valuable assets.")
